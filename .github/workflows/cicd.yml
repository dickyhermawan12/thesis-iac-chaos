name: "Continuous Integration and Continuous Deployment"
run-name: "Unit test, plan and apply Terraform configuration"
on: [push]
defaults:
  run:
    working-directory: ./iac/live
# permission for the workflow to access the repository
permissions:
  id-token: write
  contents: read
# specify environment variables
env:
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  TF_VAR_prefix: "iac-thesis"
  TF_VAR_tags: '{ "project": "iac-thesis" }'
  TF_VAR_location: "Australia Central"
  TF_VAR_vnet_address_space: '["10.1.0.0/16"]'
  TF_VAR_agw_subnet_address: '["10.1.1.0/24"]'
  TF_VAR_jumpbox_subnet_address: '["10.1.2.0/24"]'
  TF_VAR_web_subnet_address: '["10.1.3.0/24"]'
  TF_VAR_app_subnet_address: '["10.1.4.0/24"]'
  TF_VAR_db_subnet_address: '["10.1.5.0/24"]'
  TF_VAR_app_lb_private_ip: "10.1.4.100"
  TF_VAR_mysql_db_username: "dicky"
  TF_VAR_mysql_db_password: "${{ secrets.DB_PASSWORD }}"
  TF_VAR_mysql_db_schema: "microblog"
  TF_VAR_web_source_image_id: "${{ secrets.WEB_SOURCE_IMAGE_ID }}"
  TF_VAR_app_source_image_id: "${{ secrets.APP_SOURCE_IMAGE_ID }}"

jobs:
  terra-ci-ut:
    name: "Unit Testing"
    runs-on: ubuntu-latest
    steps:
      # repository checkout
      - name: Checkout
        uses: actions/checkout@v3

      # install terraform cli
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # initialize working directory containing Terraform configuration files
      - name: Terraform Init
        run: terraform init

      # validate configuration files
      - name: Terraform Validate
        run: terraform validate

      # check formatting of configuration files
      - name: Terraform Format
        run: terraform fmt -check -recursive

  terra-cd-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [terra-ci-ut]
    env:
      # need to set this to prevent Terraform from prompting for input
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      # repository checkout
      - name: Checkout
        uses: actions/checkout@v3

      # install terraform cli, wrapper is not needed as we are using the terraform cli directly
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # initialize working directory containing Terraform configuration files
      - name: Terraform Init
        run: terraform init

      # check formatting of configuration files
      - name: Terraform Format
        run: terraform fmt -check -recursive

      # execute terraform plan and save to tfplan file
      # exit code of 0 means there are no changes to apply
      # exit code of 1 means there are errors
      # exit code of 2 means there are changes to apply
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo There was an error running terraform plan
            exit 1
          else
            exit 0
          fi

      # save tfplan file as artifact
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ./iac/live/tfplan

      # string output of terraform plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # publish terraform plan to task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  terra-cd-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && needs.terra-cd-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terra-cd-plan]
    steps:
      # repository checkout
      - name: Checkout
        uses: actions/checkout@v3

      # install terraform cli
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # initialize working directory containing Terraform configuration files
      - name: Terraform Init
        run: terraform init

      # download plan from artifacts
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ./iac/live

      # apply saved plan
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
